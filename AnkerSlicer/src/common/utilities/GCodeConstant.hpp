#ifndef GCODECONSTANT_HPP
#define GCODECONSTANT_HPP

#include <QLatin1String>
#include <QList>
#include <QMap>
#include <QVector3D>

struct MemRef;

using TokenMapType = QMap<int, QLatin1String>;
#define ExceptionsMayBeThrown

namespace GCodeConstant {

//  ================================== ==================================
enum EHasAI
{
    E_AI_NotYetAndDoNothing         = 0,
    E_AI_NotYetButShouldAdded       = 1,
    E_AI_AlreadyHasAnker            = 2,
    E_AI_AddedByAnker               = 3,
};

static const QLatin1String Token_AnkerAI_0(){
    static QLatin1String ankerAI_0("M1024 L");
    return ankerAI_0;
}
static const QLatin1String Token_AnkerAI_1(){
    static QLatin1String ankerAI_1("; Z_TakePictureStart:");
    return ankerAI_1;
}
static const QLatin1String Token_AnkerAI_2(){
    static QLatin1String ankerAI_2("; Z_TakePictureEnd:");
    return ankerAI_2;
}

//  ================================== ==================================
//  ;Generated with AnkerSlicer P0 A0    // ; thumbnail begin 256 256  //; thumbnail end
enum EHasAnkerThumbnail
{
    E_AnkerThumbnail_NotYetAndDoNothing     = 0,
    E_AnkerThumbnail_NotYetButShouldAdded   = 1,
    E_AnkerThumbnail_AlreadyHasAnker        = 2,
    E_AnkerThumbnail_AddedByAnker           = 3,
    E_AnkerThumbnail_HasButNotAnker         = 4,

    E_Thunbail_AnkerFlag   = 0x10,
    E_Thunbail_AnkerReGen1 = 0x11,
    E_Thunbail_AnkerReGen2 = 0x12,
    E_Thunbail_begin       = 0x20,
    E_Thunbail_end         = 0x40,
};

static const TokenMapType Token_Thumbnail(){
    static TokenMapType tokens;
    if(tokens.isEmpty()){

        tokens[static_cast<int>(EHasAnkerThumbnail::E_Thunbail_AnkerFlag)]   = QLatin1String(";Generated with AnkerSlicer"   );
        tokens[static_cast<int>(EHasAnkerThumbnail::E_Thunbail_AnkerReGen1)] = QLatin1String(";ReGenerated with AnkerSlicer for thumbnail"   );
        tokens[static_cast<int>(EHasAnkerThumbnail::E_Thunbail_AnkerReGen2)] = QLatin1String(";ReGenerated by AnkerMake for thumbnail"   );
        tokens[static_cast<int>(EHasAnkerThumbnail::E_Thunbail_begin)]       = QLatin1String("; thumbnail begin"             );
        tokens[static_cast<int>(EHasAnkerThumbnail::E_Thunbail_end)]         = QLatin1String("; thumbnail end"               );
    }
    return tokens;
}

//  ================================== ==================================
enum EGeneratedByProducer
{
    E_ProducerUnknown = 0
    ,E_PrusaSlicer
    ,E_SuperSlicer
    ,E_Bamboo
    ,E_Simplify3D
    ,E_Cura
    ,E_AnkerSlicer = 10
    ,E_AnkerMake
    ,E_AnkerPrusa
};

static bool isBasedOn_Unknown(const EGeneratedByProducer p){ return (p == E_ProducerUnknown);}
static bool isBasedOn_Slic3r (const EGeneratedByProducer p){ return (p == E_PrusaSlicer || p == E_SuperSlicer || p == E_AnkerPrusa);}
static bool isBasedOn_Bamboo (const EGeneratedByProducer p){ return (p == E_Bamboo);}
static bool isBasedOn_Cura   (const EGeneratedByProducer p){ return (p == E_Cura || p == E_AnkerSlicer || p == E_AnkerMake);}
static bool isBasedOn_Simp3d (const EGeneratedByProducer p){ return (p == E_Simplify3D);}
static bool isBasedOn_Anker  (const EGeneratedByProducer p){ return (p == E_AnkerSlicer || p == E_AnkerMake);}

static const TokenMapType Token_Producers(){
    static TokenMapType producers;
    if(producers.isEmpty()){
        //  listProducer[(int)Unknown] = QLatin1String();
        producers[static_cast<int>(EGeneratedByProducer::E_PrusaSlicer)] = QLatin1String("; generated by PrusaSlicer"  );
        producers[static_cast<int>(EGeneratedByProducer::E_SuperSlicer)] = QLatin1String("; generated by SuperSlicer"  );
        producers[static_cast<int>(EGeneratedByProducer::E_AnkerPrusa )] = QLatin1String("; generated by AnkerMake"    );
        producers[static_cast<int>(EGeneratedByProducer::E_Simplify3D )] = QLatin1String("generated by Simplify3D");
        producers[static_cast<int>(EGeneratedByProducer::E_Cura       )] = QLatin1String(";Generated with Cura_SteamEngine" );
        producers[static_cast<int>(EGeneratedByProducer::E_AnkerMake  )] = QLatin1String(";Recompiled by AnkerMake");
        producers[static_cast<int>(EGeneratedByProducer::E_AnkerSlicer)] = QLatin1String(";Generated with AnkerSlicer");
        producers[static_cast<int>(EGeneratedByProducer::E_ProducerUnknown)] = QLatin1String("UnKnOwN!");
    }
    return producers;
}

static const TokenMapType Token_LayerKeyWord(){
    static TokenMapType layerKeyWord;
    if(layerKeyWord.isEmpty()){
        //  listProducer[(int)Unknown] = QLatin1String();
        layerKeyWord[static_cast<int>(EGeneratedByProducer::E_PrusaSlicer)] = QLatin1String(";LAYER_CHANGE"     );
        layerKeyWord[static_cast<int>(EGeneratedByProducer::E_SuperSlicer)] = QLatin1String(";LAYER_CHANGE"     );
        layerKeyWord[static_cast<int>(EGeneratedByProducer::E_AnkerPrusa )] = QLatin1String(";LAYER_CHANGE"     );
        layerKeyWord[static_cast<int>(EGeneratedByProducer::E_Bamboo     )] = QLatin1String("; CHANGE_LAYER"    );
        layerKeyWord[static_cast<int>(EGeneratedByProducer::E_Simplify3D )] = QLatin1String("; layer "          );
        layerKeyWord[static_cast<int>(EGeneratedByProducer::E_Cura       )] = QLatin1String(";LAYER:"           );
        layerKeyWord[static_cast<int>(EGeneratedByProducer::E_AnkerMake  )] = QLatin1String(";LAYER:"           );
        layerKeyWord[static_cast<int>(EGeneratedByProducer::E_AnkerSlicer)] = QLatin1String(";LAYER:"           );
        layerKeyWord[static_cast<int>(EGeneratedByProducer::E_ProducerUnknown)] = QLatin1String("");
    }
    return layerKeyWord;
}

//  ================================== ==================================
enum EGcodeToken
{
    /// ECura_Token
     E_TYPE_NoneType = 0
    ,E_TYPE_OuterWall
    ,E_TYPE_InnerWall
    ,E_TYPE_Skin
    ,E_TYPE_Support
    ,E_TYPE_SkirtBrim
    ,E_TYPE_Infill
    ,E_TYPE_SupportInfill
    ,E_TYPE_MoveCombing=8//
    ,E_TYPE_MoveRetraction=9//
    ,E_TYPE_SupportInterface=10
    ,E_TYPE_PrimeTower=11
    ,E_TYPE_NumPrintFeatureTypes=12//

    ,E_TIME                     // ";TIME:%fs"
    ,E_Filament_used            // ";Filament used: %fm"
    ,E_Filament_weight          // ";Filament weight: %fg"
    ,E_Layer_height             // ";Layer height: %f"
    ,E_MINX                     // ";MINX:%f"
    ,E_MINY                     // ";MINY:%f"
    ,E_MINZ                     // ";MINZ:%f"
    ,E_MAXX                     // ";MAXX:%f"
    ,E_MAXY                     // ";MAXY:%f"
    ,E_MAXZ                     // ";MAXZ:%f"
    ,E_MAXSPEED                 // ";MAXSPEED:%f"


    /// EAnkerToken
    ,E_LAYER_COUNT  = 0x100
    ,E_LAYER
    ,E_Z_UP
    ,E_MESH
    ,E_MESH_NONMESH
    ,E_Z_TakePictureStart
    ,E_Z_TakePictureEnd
    ,E_thumbnail_begin
    ,E_thumbnail_end
    ,E_paramBegin
    ,E_paramEnd



    /// ESuperToken
    /// EPrusaToken
    ,E_Role=0
    ,E_Wipe_Start
    ,E_Wipe_End
    ,E_Height
    ,E_Width
    ,E_Layer_Change
    ,E_Color_Change
    ,E_Pause_Print
    ,E_Custom_Code
    ,E_First_Line_M73_Placeholder
    ,E_Last_Line_M73_Placeholder
    ,E_Estimated_Printing_Time_Placeholder

    ,E_BEFORE_LAYER_CHANGE
    ,E_AFTER_LAYER_CHANGE


    //,E_thumbnail_begin
    //,E_thumbnail_end

    ,E_Role_None=0
    ,E_Role_Perimeter                   = 0x201
    ,E_Role_ExternalPerimeter
    ,E_Role_OverhangPerimeter
    ,E_Role_InternalInfill
    ,E_Role_SolidInfill
    ,E_Role_TopSolidInfill
    ,E_Role_Ironing
    ,E_Role_BridgeInfill
    ,E_Role_InternalBridgeInfill
    ,E_Role_ThinWall
    ,E_Role_GapFill
    ,E_Role_Skirt
    ,E_Role_SupportMaterial
    ,E_Role_SupportMaterialInterface
    ,E_Role_WipeTower
    ,E_Role_Milling
    ,E_Role_Custom
    ,E_Role_Mixed

    /// ESimplify3D
    ,E_SIMP_NoneType = E_TYPE_NoneType
    ,E_SIMP_Producer = 0x800
    ,E_SIMP_Skirt
    ,E_SIMP_Raft
    ,E_SIMP_OuterWall
    ,E_SIMP_InnerWall
    ,E_SIMP_GapFill         // = E_SIMP_Skin
    ,E_SIMP_Infill
    ,E_SIMP_SolidLayer      // = E_SIMP_Skin
    ,E_SIMP_Bridge
    ,E_SIMP_Support
    ,E_SIMP_PrimePillar
    ,E_SIMP_OozeShield

    ,E_SIMP_Layer           //  ; layer %d, Z = %f  ;layer 1, Z = 0.200
    ,E_SIMP_LayerEnd        //  ; layer end

    ,E_SIMP_BuildVolumeX        //  ;   buildVolumeX,%f
    ,E_SIMP_BuildVolumeY        //  ;   buildVolumeY,%f
    ,E_SIMP_BuildVolumeZ        //  ;   buildVolumeZ,%f

    ,E_SIMP_BuildTime       // ;   Build Time: 2 hours 44 minutes
    ,E_SIMP_MaterialLength  // ;   Material Length: 3412.7 mm (3.41 m)
};

static TokenMapType TokenGCode_Empty(){
    static TokenMapType empty;
    return empty;
}

static const TokenMapType TokenGCode_Anker_Cura(){
    static TokenMapType token_Gcode;

    if(token_Gcode.isEmpty()){
        token_Gcode[static_cast<int>(EGcodeToken::E_TYPE_NoneType           )] = QLatin1String();
        token_Gcode[static_cast<int>(EGcodeToken::E_TYPE_OuterWall          )] = QLatin1String(";TYPE:WALL-OUTER"        );
        token_Gcode[static_cast<int>(EGcodeToken::E_TYPE_InnerWall          )] = QLatin1String(";TYPE:WALL-INNER"        );
        token_Gcode[static_cast<int>(EGcodeToken::E_TYPE_Skin               )] = QLatin1String(";TYPE:SKIN"              );
        token_Gcode[static_cast<int>(EGcodeToken::E_TYPE_Support            )] = QLatin1String(";TYPE:SUPPORT"           );
        token_Gcode[static_cast<int>(EGcodeToken::E_TYPE_SkirtBrim          )] = QLatin1String(";TYPE:SKIRT"             );
        token_Gcode[static_cast<int>(EGcodeToken::E_TYPE_Infill             )] = QLatin1String(";TYPE:FILL"              );
        token_Gcode[static_cast<int>(EGcodeToken::E_TYPE_SupportInfill      )] = QLatin1String(";TYPE:SUPPORT"           );
        token_Gcode[static_cast<int>(EGcodeToken::E_TYPE_SupportInterface   )] = QLatin1String(";TYPE:SUPPORT-INTERFACE" );
        token_Gcode[static_cast<int>(EGcodeToken::E_TYPE_PrimeTower         )] = QLatin1String(";TYPE:PRIME-TOWER"       );

        token_Gcode[static_cast<int>(EGcodeToken::E_LAYER_COUNT             )] = QLatin1String(";LAYER_COUNT:"           );
        token_Gcode[static_cast<int>(EGcodeToken::E_LAYER                   )] = QLatin1String(";LAYER:"                 );
        token_Gcode[static_cast<int>(EGcodeToken::E_Z_UP                    )] = QLatin1String(";Z_UP:"                  );
        token_Gcode[static_cast<int>(EGcodeToken::E_MESH                    )] = QLatin1String(";MESH:"                  );
        token_Gcode[static_cast<int>(EGcodeToken::E_MESH_NONMESH            )] = QLatin1String(";MESH:NONMESH"           );
        token_Gcode[static_cast<int>(EGcodeToken::E_Z_TakePictureStart      )] = QLatin1String("; Z_TakePictureStart: "  );
        token_Gcode[static_cast<int>(EGcodeToken::E_Z_TakePictureEnd        )] = QLatin1String("; Z_TakePictureEnd: "    );
        token_Gcode[static_cast<int>(EGcodeToken::E_thumbnail_begin         )] = QLatin1String("; thumbnail begin "      );
        token_Gcode[static_cast<int>(EGcodeToken::E_thumbnail_end           )] = QLatin1String("; thumbnail end"         );
        token_Gcode[static_cast<int>(EGcodeToken::E_paramBegin              )] = QLatin1String(";paramBegin"             );
        token_Gcode[static_cast<int>(EGcodeToken::E_paramEnd                )] = QLatin1String(";paramEnd"               );

        token_Gcode[static_cast<int>(EGcodeToken::E_TIME                    )] = QLatin1String(";TIME:"                  );
        token_Gcode[static_cast<int>(EGcodeToken::E_Filament_used           )] = QLatin1String(";Filament used: "        );
        token_Gcode[static_cast<int>(EGcodeToken::E_Filament_weight         )] = QLatin1String(";Filament weight: "      );
        token_Gcode[static_cast<int>(EGcodeToken::E_Layer_height            )] = QLatin1String(";Layer height: "         );
        token_Gcode[static_cast<int>(EGcodeToken::E_MINX                    )] = QLatin1String(";MINX:"                  );
        token_Gcode[static_cast<int>(EGcodeToken::E_MINY                    )] = QLatin1String(";MINY:"                  );
        token_Gcode[static_cast<int>(EGcodeToken::E_MINZ                    )] = QLatin1String(";MINZ:"                  );
        token_Gcode[static_cast<int>(EGcodeToken::E_MAXX                    )] = QLatin1String(";MAXX:"                  );
        token_Gcode[static_cast<int>(EGcodeToken::E_MAXY                    )] = QLatin1String(";MAXY:"                  );
        token_Gcode[static_cast<int>(EGcodeToken::E_MAXZ                    )] = QLatin1String(";MAXZ:"                  );
        token_Gcode[static_cast<int>(EGcodeToken::E_MAXSPEED                )] = QLatin1String(";MAXSPEED:"              );

    }
    return token_Gcode;
}

static const TokenMapType TokenGCode_Super_Prusa(){
    static TokenMapType token_Gcode;

    if(token_Gcode.isEmpty()){
        token_Gcode[static_cast<int>(EGcodeToken::E_Role                                    )] = QLatin1String(";TYPE:"                                    );
        token_Gcode[static_cast<int>(EGcodeToken::E_Wipe_Start                              )] = QLatin1String(";WIPE_START"                               );
        token_Gcode[static_cast<int>(EGcodeToken::E_Wipe_End                                )] = QLatin1String(";WIPE_END"                                 );
        token_Gcode[static_cast<int>(EGcodeToken::E_Height                                  )] = QLatin1String(";HEIGHT:"                                  );
        token_Gcode[static_cast<int>(EGcodeToken::E_Width                                   )] = QLatin1String(";WIDTH:"                                   );
        token_Gcode[static_cast<int>(EGcodeToken::E_Layer_Change                            )] = QLatin1String(";LAYER_CHANGE"                             );
        token_Gcode[static_cast<int>(EGcodeToken::E_Color_Change                            )] = QLatin1String(";COLOR_CHANGE"                             );
        token_Gcode[static_cast<int>(EGcodeToken::E_Pause_Print                             )] = QLatin1String(";PAUSE_PRINT"                              );
        token_Gcode[static_cast<int>(EGcodeToken::E_Custom_Code                             )] = QLatin1String(";CUSTOM_GCODE"                             );
        token_Gcode[static_cast<int>(EGcodeToken::E_First_Line_M73_Placeholder              )] = QLatin1String(";_GP_FIRST_LINE_M73_PLACEHOLDER"           );
        token_Gcode[static_cast<int>(EGcodeToken::E_Last_Line_M73_Placeholder               )] = QLatin1String(";_GP_LAST_LINE_M73_PLACEHOLDER"            );
        token_Gcode[static_cast<int>(EGcodeToken::E_Estimated_Printing_Time_Placeholder     )] = QLatin1String(";_GP_ESTIMATED_PRINTING_TIME_PLACEHOLDER"  );

        token_Gcode[static_cast<int>(EGcodeToken::E_BEFORE_LAYER_CHANGE                     )] = QLatin1String(";BEFORE_LAYER_CHANGE"                      );
        token_Gcode[static_cast<int>(EGcodeToken::E_AFTER_LAYER_CHANGE                      )] = QLatin1String(";AFTER_LAYER_CHANGE"                       );

        token_Gcode[static_cast<int>(EGcodeToken::E_thumbnail_begin                         )] = QLatin1String("; thumbnail begin "                        );
        token_Gcode[static_cast<int>(EGcodeToken::E_thumbnail_end                           )] = QLatin1String("; thumbnail end"                           );

        token_Gcode[static_cast<int>(EGcodeToken::E_Role_Perimeter                          )] = QLatin1String(";TYPE:Internal perimeter"                  );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_ExternalPerimeter                  )] = QLatin1String(";TYPE:External perimeter"                  );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_OverhangPerimeter                  )] = QLatin1String(";TYPE:Overhang perimeter"                  );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_InternalInfill                     )] = QLatin1String(";TYPE:Internal infill"                     );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_SolidInfill                        )] = QLatin1String(";TYPE:Solid infill"                        );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_TopSolidInfill                     )] = QLatin1String(";TYPE:Top solid infill"                    );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_Ironing                            )] = QLatin1String(";TYPE:Ironing"                             );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_BridgeInfill                       )] = QLatin1String(";TYPE:Bridge infill"                       );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_InternalBridgeInfill               )] = QLatin1String(";TYPE:Internal bridge infill"              );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_ThinWall                           )] = QLatin1String(";TYPE:Thin wall"                           );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_GapFill                            )] = QLatin1String(";TYPE:Gap fill"                            );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_Skirt                              )] = QLatin1String(";TYPE:Skirt"                               );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_SupportMaterial                    )] = QLatin1String(";TYPE:Support material"                    );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_SupportMaterialInterface           )] = QLatin1String(";TYPE:Support material interface"          );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_WipeTower                          )] = QLatin1String(";TYPE:Wipe tower"                          );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_Milling                            )] = QLatin1String(";TYPE:Mill"                                );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_Custom                             )] = QLatin1String(";TYPE:Custom"                              );
        token_Gcode[static_cast<int>(EGcodeToken::E_Role_Mixed                              )] = QLatin1String(";TYPE:Mixed"                               );
    }
    return token_Gcode;
}

static const TokenMapType TokenGCode_Simplify3D(){
    static TokenMapType token_Gcode;

    if(token_Gcode.isEmpty()){
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_NoneType           )] = QLatin1String();
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_Producer           )] = QLatin1String("generated by Simplify3D"        );
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_Skirt              )] = QLatin1String(" skirt"             );
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_Raft               )] = QLatin1String(" raft"              );
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_OuterWall          )] = QLatin1String(" outer perimeter"   );
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_InnerWall          )] = QLatin1String(" inner perimeter"   );
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_GapFill            )] = QLatin1String(" gap fill"          );
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_Infill             )] = QLatin1String(" infill"            );
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_SolidLayer         )] = QLatin1String(" solid layer"       );
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_Bridge             )] = QLatin1String(" bridge"            );
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_Support            )] = QLatin1String(" support"           );
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_PrimePillar        )] = QLatin1String(" prime pillar"      );
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_OozeShield         )] = QLatin1String(" ooze shield"       );

        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_Layer              )] = QLatin1String("layer "             );  // ; layer %d, Z = %f
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_LayerEnd           )] = QLatin1String(" layer end"         );

        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_BuildVolumeX       )] = QLatin1String("buildVolumeX,"      );  //  ;   buildVolumeX,%f
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_BuildVolumeY       )] = QLatin1String("buildVolumeY,"      );  //  ;   buildVolumeY,%f
        token_Gcode[static_cast<int>(EGcodeToken::E_SIMP_BuildVolumeZ       )] = QLatin1String("buildVolumeZ,"      );  //  ;   buildVolumeZ,%f
    }
    return token_Gcode;
}

//  ================================== ==================================
//  head tail
struct GCodeInfo{
    QString srcGcodeFilePath;
    QString dstGcodeFilePath;
    QLatin1String           newLine         {"\n"};
    EGeneratedByProducer    producer        {EGeneratedByProducer::E_ProducerUnknown};
    EHasAI                  hasAI           {EHasAI::E_AI_NotYetAndDoNothing};
    EHasAnkerThumbnail      hasThm          {EHasAnkerThumbnail::E_AnkerThumbnail_NotYetAndDoNothing};

    QString errorStr;
    bool hasError(){return !errorStr.isEmpty();}

    float printTime             {0.0f};     //  s
    float printFilamenLength    {0.0f};     //  m
    float printFilamenWeight    {0.0f};     //  g

    float printMaxSpeed         {0.0f};     //  mm/min
    float layerHeight           {0.0f};
    float extrusionWidth        {0.0f};
    int   layerCount            {0   };
    bool  relative_extrusion    {false};    //  G90 → false, G91 → false

    //  mm
    float printObjectBox_minX               {+std::numeric_limits<float>::max()};
    float printObjectBox_minY               {+std::numeric_limits<float>::max()};
    float printObjectBox_minZ               {+std::numeric_limits<float>::max()};
    float printObjectBox_maxX               {-std::numeric_limits<float>::max()};
    float printObjectBox_maxY               {-std::numeric_limits<float>::max()};
    float printObjectBox_maxZ               {-std::numeric_limits<float>::max()};

    QVector3D machineSize       {0.0f,0.0f,0.0f};
    QString   machineName       {""};

    const TokenMapType getTokenMap() const {
        if( false );
        else if(isBasedOn_Simp3d (producer)) { return TokenGCode_Simplify3D() ; }
        else if(isBasedOn_Slic3r (producer)) { return TokenGCode_Super_Prusa(); }
        else if(isBasedOn_Cura   (producer)) { return TokenGCode_Anker_Cura() ; }
        else { return TokenGCode_Empty() ; } //  Must not miss
    }
    QLatin1String getProducer() const{
        return Token_Producers()   [static_cast<int>(producer)];
    }
    QLatin1String getLayerKeyWord() const{
        return Token_LayerKeyWord()[static_cast<int>(producer)];
    }
};

}
Q_DECLARE_METATYPE(GCodeConstant::GCodeInfo)
namespace GC = GCodeConstant; //  end

/*

*/


#endif // GCODECONSTANT_HPP
